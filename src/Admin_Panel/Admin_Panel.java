/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package Admin_Panel;
import DBA.*;
import Add_Patient.*;
import Add_Doctor.*;
import Add_Disease.*;
import java.awt.Font;
import java.sql.Date;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import patient_print_form.*;
import doctor_print_form.*;
/**
 *
 * @author djzaamir
 */
public class Admin_Panel extends javax.swing.JFrame {
    
    
    
    //vars
    private enum curr_display_table {PATIENT_TABLE , DOCTOR_TABLE};
    private  curr_display_table d_table;
    private enum curr_patient_srh_func {By_id , By_name , By_fname ,By_doctorname ,By_disease, By_dob , By_Age , By_doc_spec};
    private curr_patient_srh_func Search_function_Patient = curr_patient_srh_func.By_id;
    //end of cars
    
    
    
    
    private void renderSelectedTableToJTable() throws SQLException {
        if (d_table == curr_display_table.PATIENT_TABLE) {
            
            try {
                setUpDisplayTablePatientTable();
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(d_table == curr_display_table.DOCTOR_TABLE){
            
            setUpDisplayTableDoctorTable();
            
        }
    }
    
    /**
     * Creates new form Admin_Panel
     * @throws java.sql.SQLException
     */
    public Admin_Panel() throws SQLException {
        initComponents();
        d_table = curr_display_table.PATIENT_TABLE;
        
        setUpDisplayTablePatientTable();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        jMenuItem9.setText("jMenuItem9");

        jMenu5.setText("File");
        jMenuBar2.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar2.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Panel");
        setBackground(new java.awt.Color(255, 255, 255));
        setFocusable(false);
        setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        setIconImages(null);
        setLocation(new java.awt.Point(200, 150));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(1088, 613));
        setMinimumSize(new java.awt.Dimension(1088, 613));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setBackground(new java.awt.Color(204, 204, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Patient Records");

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton3.setText("Update Record");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton4.setText("Delete Record");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setText("Search by Id");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jButton2.setText("Add Patient");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton8.setText("Print");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Add Doctor");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Search Patient by Name");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuBar1.setInheritsPopupMenu(true);

        jMenu1.setText("Manage Records ");
        jMenu1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu1.setInheritsPopupMenu(true);

        jMenuItem1.setText("Add New Patient");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Add New Doctor");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Add New Disease");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Delete Patient");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenu4.setText("Update Records");

        jMenuItem7.setText("Update Doctor");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuItem6.setText("Update Patient");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenu1.add(jMenu4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Search Records");
        jMenu2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu2.setInheritsPopupMenu(true);

        jMenuItem10.setText("Patient By ID");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Patient By Name");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem8.setText("Patient By Age");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem13.setText("Patient By Disease");
        jMenu2.add(jMenuItem13);

        jMenuItem14.setText("Patient By Doctor");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem14);

        jMenu7.setText("Search Doctor");

        jMenuItem12.setText("Doctor By Specialization");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem12);

        jMenu2.add(jMenu7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu3.setInheritsPopupMenu(true);

        jMenuItem17.setText("About Us");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem17);

        jMenuItem16.setText("Change Password");
        jMenu3.add(jMenuItem16);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Add_Doctor new_doctor_form = null;
        try {
            new_doctor_form = new Add_Doctor();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        new_doctor_form.setVisible(true);
        new_doctor_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
        //launch a new form to take input for user data
        Add_Patient new_patient_form = new Add_Patient();
        new_patient_form.setVisible(true);
        new_patient_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        Add_Disease new_disease =  new Add_Disease();
        new_disease.setVisible(true);
        new_disease.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            renderSelectedTableToJTable();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        
        //first of all change the jLabel being used for msgs
        jLabel1.setText("Select a Patient to delete"); 
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        //check if a row is selected or not
        int row_to_del = jTable1.getSelectedRow();
        if (row_to_del != -1) {
            //Now we need extract primary key out of it
            int pk_to_del = (int) jTable1.getValueAt(row_to_del, 0);
            try {
                //Now we need to open the same new patient form , but with some modificatios
                //These modifications include , sending the pk of patient to update , and loading data into the form
                if (new DBA().delPatient(pk_to_del)) {
                    jLabel1.setText("Successful Deletion");
                    
                    //Call the appropriate JTable renderer
                    renderSelectedTableToJTable();
                    
                }else  {
                    jLabel1.setText("Error in deletion!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }else{
            jLabel1.setText("Please Select a patient to delete");
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
              d_table = curr_display_table.DOCTOR_TABLE;
              setUpDisplayTableDoctorTable();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            d_table = curr_display_table.PATIENT_TABLE;
            // TODO add your handling code here:
            setUpDisplayTablePatientTable();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        int selected_row  =  jTable1.getSelectedRow();
        if (selected_row !=  -1) {
            
            //grab the pk from row
            int pk = (int) jTable1.getValueAt(selected_row, 0);
            
            if (d_table == curr_display_table.PATIENT_TABLE) { //for Patient
                Add_Patient update_patient  =  new Add_Patient();
                update_patient.setSent_pk_from_Admin_panel(pk);
                try {
                    update_patient.loadDataToForm();
                    update_patient.setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //for Doctor
            else{
                Add_Doctor update_docotor = null;
                try {
                    update_docotor = new Add_Doctor();
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
                update_docotor.setSent_pk_from_Admin_panel(pk);
                try {
                    update_docotor.loadDataToForm();
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
                update_docotor.setVisible(true);
                
            }
            
        }else{
            if (d_table == curr_display_table.PATIENT_TABLE) {
                jLabel1.setText("Select a Patient to Update");
            }else{
                jLabel1.setText("Select a Doctor to Update");
            }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        //set label to search by id
        jLabel2.setText("Search by Id :");
        
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_id; 
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    
    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        
        
    }//GEN-LAST:event_jTextField1KeyPressed
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        
        if(Search_function_Patient  == curr_patient_srh_func.By_doc_spec){
            
            try {
                DBA dba = new DBA();
                
                jButton4.setEnabled(false);//Because deletion of doctors is not allowed according to out bussines rule
                d_table = curr_display_table.DOCTOR_TABLE; // change the functionaality of refresh to button to update doctors
                jLabel1.setText("Doctor Records"); //change the label to display doctor records
                
                //Working on table model
                DefaultTableModel model =  new DefaultTableModel();
                Object[]  columns = {"Id" , "Specialization" , "Name"};
                model.setColumnIdentifiers(columns);
                jTable1.setModel(model);
                
                Object test_content = null; //this var will be used to to hold the data to match on the basis of which results will be returned
                
                //Grabing content from jTextField
                test_content = jTextField1.getText();
                
                if (!((String)test_content).equals("")){
                    
                    LinkedList<Doctor> doctors = null;
                    
                    //get matched doctors according to field of specialization
                    doctors =  dba.searchDoctorBasedUponSpecialization((String)test_content);
                    
                    Object[] row = new Object[3];
                    for(Doctor d : doctors){
                        
                        //Now adding data from each patient to the row
                        row[0] = d.getDoctor_id();
                        row[1] = d.getDoctor_specialization();
                        row[2] = d.getDoctor_name();
                        //Now add this row to the model
                        model.addRow(row);
                        
                    }
                    
                    
                    
                }else{
                    renderSelectedTableToJTable();
                }
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
            try {
                DBA dba = new DBA();
                
                //Enable button for deletion , because this is againt our bussines rule
                jButton4.setEnabled(true);
                
                d_table = curr_display_table.PATIENT_TABLE; //Change the functionality of refresh button to update for doctors
                
                jLabel1.setText("Patient Records"); //change the label to display patients records
                
                
                //by default load patients record into jTable
                DefaultTableModel model =  new DefaultTableModel();  //creating a model for JTable class
                Object[] columns = {"Id","Name", "Father Name" , "Gender" , "Date of birth" , "Doctor Name"}; //setting up identifiers for jtable class
                model.setColumnIdentifiers(columns); //Now binding Identifiers with model
                jTable1.setModel(model);//Now Binding Model with jTable
                
                Object test_content = null; //this var will be used to to hold the data to match on the basis of which results will be returned
                
                //Grabing content from jTextField
                test_content = jTextField1.getText();
                
                if (!((String)test_content).equals("")){
                    LinkedList<Patient> patients = null;
                    
                    
                    //Now deciding what kinda method to invoke from dba
                    if (Search_function_Patient == curr_patient_srh_func.By_id) {
                        patients = dba.searchPatient(DBA.SEARCH.BY_ID, test_content);
                    }else if (Search_function_Patient == curr_patient_srh_func.By_name) {
                        patients = dba.searchPatient(DBA.SEARCH.BY_NAME, test_content);
                    }else if(Search_function_Patient == curr_patient_srh_func.By_doctorname){
                        patients = dba.searchPatient(DBA.SEARCH.BY_DOCTOR_NAME, test_content);
                    }else if(Search_function_Patient == curr_patient_srh_func.By_Age){
                        patients = dba.searchPatient(DBA.SEARCH.BY_DOB , test_content);
                        
                        LinkedList<Patient> selected_patients = new LinkedList<>();
                        
                        //Now we will only select those patients in the final list whose age is equal to the desired age
                        
                        for(Patient  p : patients){
                            Date dob =  p.getDob();
                            
                            System.out.println(Calendar.getInstance().get(Calendar.YEAR) + "  " + dob.getYear());
                            
                            if (Calendar.getInstance().get(Calendar.YEAR) -  dob.getYear()  == Integer.parseInt((String) test_content)) {
                                selected_patients.add(p);
                            }
                        }
                        
                        patients =  selected_patients;
                    }
                    
                    
                    Object[] row = new Object[6];
                    for(Patient p : patients){
                        
                        //Now adding data from each patient to the row
                        row[0] =  p.getPatient_id();
                        row[1] =  p.getPatient_name();
                        row[2] =  p.getPatient_father_name();
                        row[3] =  (p.getSex() == true ? "Male":"Female");
                        row[4] =  p.getDob();
                        row[5] = p.getDoctor_name();
                        
                        //Now add this row to the model
                        model.addRow(row);
                        
                    }
                }else{
                    renderSelectedTableToJTable();
                }
                
                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jTextField1KeyReleased
    
    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        //set label to search by id
        jLabel2.setText("Search by Name :");
        
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_name;
    }//GEN-LAST:event_jMenuItem11ActionPerformed
    
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        //set label to search by id
        jLabel2.setText("Search by Doctor :");
        
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_doctorname;
    }//GEN-LAST:event_jMenuItem14ActionPerformed
    
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        
        //Search by age
        //set label to search by id
        jLabel2.setText("Search by Age :");
        
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_Age;    
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    
    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Edhi clinic management system is a small yet powerful clinic management software , which proivdes multiple functions , along with all of the above it also has powerful search Options to quickly get relevant data");
    }//GEN-LAST:event_jMenuItem17ActionPerformed
    
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        //set label to search by id
        jLabel2.setText("Search by Name :");
        jLabel1.setText("Doctor Records");
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_doc_spec;
        d_table = curr_display_table.PATIENT_TABLE;
        try {
            renderSelectedTableToJTable();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //launch a new form to take input for user data
        Add_Patient new_patient_form = new Add_Patient();
        new_patient_form.setVisible(true);
        new_patient_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        Add_Doctor new_doctor_form = null;
        try {
            new_doctor_form = new Add_Doctor();
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        new_doctor_form.setVisible(true);
        new_doctor_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
         //set label to search by id
        jLabel2.setText("Search by Name :");
        
        //set the search method to Search by id
        Search_function_Patient = curr_patient_srh_func.By_name;
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        
        int selected_row = jTable1.getSelectedRow();
        if (selected_row != -1) {
            
            int pk = (int) jTable1.getValueAt(selected_row, 0);
            
            //now we will print patient and doctor records in different ways
            if (d_table == curr_display_table.DOCTOR_TABLE) {
                
                try {
                    Doctor doctor = new DBA().getDoctor(pk);
                    doctor_print_form doctor_form =  new doctor_print_form(doctor);
                    
                    doctor_form.setVisible(true);
                    doctor_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
               }
            }else{
                
                try {
                    Patient p =  new DBA().getPatient(pk);
                    Disease_History disease_History = new DBA().getDisease_History(pk);
                    Prescription_History prescription_History =  new DBA().getPrescription_History(pk);
                    
                    //Now populate patient print form
                    patient_print_form print_form =  new patient_print_form(p , disease_History , prescription_History);
                    
                    print_form.setVisible(true);
                    print_form.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }else{
            jLabel1.setText("Please select a record!");
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Admin_Panel().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    
    
    //function to display records from patients to JTable
    private void setUpDisplayTablePatientTable() throws SQLException {
        
        //Enable button for deletion , because this is againt our bussines rule
        jButton4.setEnabled(true);
        
        d_table = curr_display_table.PATIENT_TABLE; //Change the functionality of refresh button to update for doctors
        
        jLabel1.setText("Patient Records"); //change the label to display doctor records
        
        
        //by default load patients record into jTable
        DefaultTableModel model =  new DefaultTableModel();  //creating a model for JTable class
        Object[] columns = {"Id","Name", "Father Name" , "Gender" , "Date of birth" , "Doctor Name"}; //setting up identifiers for jtable class
        model.setColumnIdentifiers(columns); //Now binding Identifiers with model
        jTable1.setModel(model);//Now Binding Model with jTable
        
        LinkedList<Patient> patients = new DBA().getPatients();
        Object[] row = new Object[6];
        for(Patient p : patients){
            
            //Now adding data from each patient to the row
            row[0] =  p.getPatient_id();
            row[1] =  p.getPatient_name();
            row[2] =  p.getPatient_father_name();
            row[3] =  (p.getSex() == true ? "Male":"Female");
            row[4] =  p.getDob();
            row[5] = p.getDoctor_name();
            
            //Now add this row to the model
            model.addRow(row);
            
        }
    }
    
    //function to display Records from doctor to JTable
    private void setUpDisplayTableDoctorTable()throws SQLException{
        
        //disable button for deletion , because this is againt our bussines rule
        jButton4.setEnabled(false);
        
        d_table = curr_display_table.DOCTOR_TABLE; //Change the functionality of refresh button to update for doctors
        
        jLabel1.setText("Doctor Records"); //change the label to display doctor records
        
        DefaultTableModel model = new DefaultTableModel();
        Object[] columns = {"Id" , "Specialization" , "Name"};
        model.setColumnIdentifiers(columns);
        jTable1.setModel(model);
        
        LinkedList<Doctor> doctors =  new DBA().getDoctors();
        Object[] row = new Object[3];
        
        for(Doctor doctor : doctors){
            row[0]  = doctor.getDoctor_id();
            row[1]  = doctor.getDoctor_name();
            row[2] = doctor.getDoctor_specialization();
            
            model.addRow(row);
        }
        
    }
    
}
